version: '3'

services:
  nginx:
    image: nginx:latest
    ports:
      - "443:443"
      - "80:80"  # Optional: Redirect HTTP to HTTPS
    volumes:
      - ./certs:/etc/nginx/certs
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - yolink_chekt
    restart: unless-stopped
    networks:
      - yolink-network

  yolink_chekt:
    build: .
    expose:
      - "5000"  # Changed from ports to expose, as Nginx will handle external access
    volumes:
      - .:/app
      - ./logs:/app/logs
      - ./templates:/app/templates
      - ./certs/cert.pem:/app/cert.pem
      - ./certs/key.pem:/app/key.pem
    environment:
      - FLASK_ENV=production
      - LOG_DIR=/app/logs
      - QUART_DEBUG=true
      - DISABLE_HTTPS=true  # Add this to use HTTP when behind nginx
    depends_on:
      - redis
      - modbus-proxy
    restart: unless-stopped
    networks:
      - yolink-network

  modbus-proxy:
    build:
      context: .
      dockerfile: Dockerfile.modbus-proxy
    container_name: modbus-proxy
    ports:
      - "1502:1502"
      - "5001:5000"
    environment:
      - TARGET_IP=10.250.250.2
      - TARGET_PORT=502
      - LISTEN_PORT=1502
      - API_PORT=5000
      - FLASK_SECRET_KEY=Skunkworks1!
    restart: unless-stopped
    networks:
      - yolink-network

  redis:
    image: redis:6
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - yolink-network

  websocket-proxy:
    build:
      context: .
      dockerfile: websocket-proxy/Dockerfile
    container_name: yolink-websocket-proxy
    restart: unless-stopped
    environment:
      - PORT=3000
      - API_URL=http://yolink_chekt:5000/get_sensor_data
      - FETCH_INTERVAL=2500
      - DISABLE_HTTPS=true
    expose:
      - "3000"  # Only expose to internal network
    volumes:
      - ./certs/cert.pem:/app/cert.pem
      - ./certs/key.pem:/app/key.pem
    depends_on:
      - yolink_chekt
    networks:
      - yolink-network

  rtsp-streamer:
    build:
      context: ./rtsp-streamer
      dockerfile: Dockerfile
    container_name: yolink-rtsp-streamer
    restart: unless-stopped
    environment:
      - DASHBOARD_URL=http://websocket-proxy:3000
      - RTSP_PORT=554
      - STREAM_NAME=yolink-dashboard
      - FRAME_RATE=6
      - WIDTH=1920
      - HEIGHT=1080
      - CYCLE_INTERVAL=10000
      - ONVIF_AUTH_REQUIRED=true
      - ONVIF_USERNAME=admin
      - ONVIF_PASSWORD=123456
      - ONVIF_AUTH_METHOD=both
      - ONVIF_PORT=8000
      - ONVIF_TEST_MODE=true
      - SERVER_IP=0.0.0.0
      - ANNOUNCE_IP=10.250.250.2
      - RTSP_API_PORT=80
      - WS_PORT=9999
      - LOW_RES_SENSORS_PER_PAGE=6
      - SENSORS_PER_PAGE=20
      - MAC_ADDRESS=51:12:56:73:D6:AA
    ports:
      - "554:554"
      - "80:80"
      - "9999:9999"
      - "3702:3702/udp"
    volumes:
      - /tmp/streams:/tmp/streams
    depends_on:
      - websocket-proxy
    networks:
      - yolink-network

networks:
  yolink-network:
    driver: bridge

volumes:
  redis-data: